
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;


namespace Mozu.Api.Clients.Platform.Developer
{
	/// <summary>
	/// Use the Applications resource to manage the applications associated with a developer account.
	/// </summary>
	public partial class ApplicationVersionClient 	{
		
		/// <summary>
		/// Retrieves the list of applications associated with the developer account scoped to the user claim specified in the request.
		/// </summary>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.ApplicationCollection"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetAllApplications();
		///   var applicationCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.ApplicationCollection> GetAllApplicationsClient()
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.GetAllApplicationsUrl();
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.AppDev.ApplicationCollection>()
									.WithVerb(verb).WithResourceUrl(url)
;
			return mozuClient;

		}

		/// <summary>
		/// Retrieves the details of the application specified in the request. The application specified in the request must be associated with the developer account scoped to the user claim specified in the request header, otherwise the operation returns an error.
		/// </summary>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.Application"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetApplication();
		///   var applicationClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.Application> GetApplicationClient()
		{
			return GetApplicationClient( null);
		}

		/// <summary>
		/// Retrieves the details of the application specified in the request. The application specified in the request must be associated with the developer account scoped to the user claim specified in the request header, otherwise the operation returns an error.
		/// </summary>
		/// <param name="applicationId">Unique identifier of the application.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.Application"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetApplication( applicationId);
		///   var applicationClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.Application> GetApplicationClient(int? applicationId =  null)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.GetApplicationUrl(applicationId);
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.AppDev.Application>()
									.WithVerb(verb).WithResourceUrl(url)
;
			return mozuClient;

		}

		/// <summary>
		/// Retrieves the details of a specific version of an application associated with the developer account scoped to the user claim specified in the request.
		/// </summary>
		/// <param name="applicationVersionId">Unique identifier of the application version. Application version IDs are unique across all applications associated with a developer account.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.ApplicationVersion"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetApplicationVersion( applicationVersionId);
		///   var applicationVersionClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.ApplicationVersion> GetApplicationVersionClient(int applicationVersionId)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.GetApplicationVersionUrl(applicationVersionId);
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.AppDev.ApplicationVersion>()
									.WithVerb(verb).WithResourceUrl(url)
;
			return mozuClient;

		}

		/// <summary>
		/// Retrieves a list of the package definitions created for an application version, including all development packages and release packages. The application must be associated with the developer account scoped to the user claim specified in the request.
		/// </summary>
		/// <param name="applicationVersionId">Unique identifier of the application version. Application version IDs are unique across all applications associated with a developer account.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.PackageCollection"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetPackages( applicationVersionId);
		///   var packageCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.PackageCollection> GetPackagesClient(int applicationVersionId)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.GetPackagesUrl(applicationVersionId);
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.AppDev.PackageCollection>()
									.WithVerb(verb).WithResourceUrl(url)
;
			return mozuClient;

		}

		/// <summary>
		/// Retrieves the details of a package definition associated with an application version. The application ust be associated with the developer account scoped to the user claim specified in the request. 
		/// </summary>
		/// <param name="applicationVersionId">Unique identifier of the application version associated with the package. Application version IDs are unique across all applications associated with the developer account.</param>
		/// <param name="packageId">Unique identifier of the package to retrieve.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.Package"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetPackage( applicationVersionId,  packageId);
		///   var packageClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.Package> GetPackageClient(int applicationVersionId, int packageId)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.GetPackageUrl(applicationVersionId, packageId);
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.AppDev.Package>()
									.WithVerb(verb).WithResourceUrl(url)
;
			return mozuClient;

		}

		/// <summary>
		/// Retrieves the metadata for items in a package associated with an application version, including a list of all files and subfolders. The application must be associated with the developer account acoped to the user claim specified in the request.
		/// </summary>
		/// <param name="applicationVersionId">Unique identifier of the application version. Application version IDs are unique across all applications associated with a developer account.</param>
		/// <param name="packageId">Unique identifier of the package.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.FolderMetadata"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetPackageItemsMetadata( applicationVersionId,  packageId);
		///   var folderMetadataClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.FolderMetadata> GetPackageItemsMetadataClient(int applicationVersionId, int packageId)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.GetPackageItemsMetadataUrl(applicationVersionId, packageId);
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.AppDev.FolderMetadata>()
									.WithVerb(verb).WithResourceUrl(url)
;
			return mozuClient;

		}

		/// <summary>
		/// Retrieves the metadata of a file in a package for an application version. The application must be associated with the developer account scoped to the user claim specified in the request.
		/// </summary>
		/// <param name="applicationVersionId">Unique identifier of the application version. Application version IDs are unique across all applications associated with a developer account.</param>
		/// <param name="itempath">Complete file directory location and name of the item in the package to retrieve metadata.</param>
		/// <param name="packageId">Unique identifier of the package.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.FileMetadata"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetPackageItemMetadata( applicationVersionId,  packageId,  itempath);
		///   var fileMetadataClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata> GetPackageItemMetadataClient(int applicationVersionId, int packageId, string itempath)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.GetPackageItemMetadataUrl(applicationVersionId, itempath, packageId);
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata>()
									.WithVerb(verb).WithResourceUrl(url)
;
			return mozuClient;

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationVersionId"></param>
		/// <param name="packageId"></param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="System.IO.Stream"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetPackageFilesZip( applicationVersionId,  packageId);
		///   var streamClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<System.IO.Stream> GetPackageFilesZipClient(int applicationVersionId, int packageId)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.GetPackageFilesZipUrl(applicationVersionId, packageId);
			const string verb = "GET";
			var mozuClient = new MozuClient<System.IO.Stream>()
									.WithVerb(verb).WithResourceUrl(url)
;
			return mozuClient;

		}

		/// <summary>
		/// Creates a new development or release package for the application version specified in the request.
		/// </summary>
		/// <param name="applicationVersionId">Unique identifier of the application version. Application version IDs are unique across all applications associated with the developer account.</param>
		/// <param name="package">Properties of the development or release package to define.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.Package"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=AddPackage( pkg,  applicationVersionId);
		///   var packageClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.Package> AddPackageClient(Mozu.Api.Contracts.AppDev.Package pkg, int applicationVersionId)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.AddPackageUrl(applicationVersionId);
			const string verb = "POST";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.AppDev.Package>()
									.WithVerb(verb).WithResourceUrl(url)
									.WithBody<Mozu.Api.Contracts.AppDev.Package>(pkg);
			return mozuClient;

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationVersionId"></param>
		/// <param name="packageId"></param>
		/// <param name="renameInfo"></param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.FileMetadata"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=ChangePackageFileNameOrPath( renameInfo,  applicationVersionId,  packageId);
		///   var fileMetadataClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata> ChangePackageFileNameOrPathClient(Mozu.Api.Contracts.AppDev.RenameInfo renameInfo, int applicationVersionId, int packageId)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.ChangePackageFileNameOrPathUrl(applicationVersionId, packageId);
			const string verb = "POST";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata>()
									.WithVerb(verb).WithResourceUrl(url)
									.WithBody<Mozu.Api.Contracts.AppDev.RenameInfo>(renameInfo);
			return mozuClient;

		}

		/// <summary>
		/// Uploads a file to a defined package for an application version in the file location specified in the request.
		/// </summary>
		/// <param name="applicationVersionId">Unique identifier of the application version. Application version IDs are unique across all applications associated with a developer account.</param>
		/// <param name="filepath">The file location to which to add the package file.</param>
		/// <param name="packageId">Unique identifier of the package.</param>
		/// <param name="stream">The contents of the package file to upload, which requires a content-type value of "application/octet-stream" in the request header.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.FileMetadata"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=AddPackageFile( stream,  applicationVersionId,  packageId,  filepath,  contentType);
		///   var fileMetadataClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata> AddPackageFileClient(System.IO.Stream stream, int applicationVersionId, int packageId, string filepath, String  contentType= null)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.AddPackageFileUrl(applicationVersionId, filepath, packageId);
			const string verb = "POST";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata>()
									.WithVerb(verb).WithResourceUrl(url)
									.WithBody(stream)									.WithHeader(Headers.CONTENT_TYPE ,contentType)
;
			return mozuClient;

		}

		/// <summary>
		/// Updates one or more properties of a file in a package associated with an application version.
		/// </summary>
		/// <param name="applicationVersionId">Unique identifier of the application version. Application version IDs are unique across all applications associated with a developer account.</param>
		/// <param name="filepath">The location path and name that identifies the package file to update.</param>
		/// <param name="packageId">The unique identifier of the package.</param>
		/// <param name="stream">The contents of the package file to update, which requires a content-type value of "application/octet-stream" in the request header.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.FileMetadata"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=UpdatePackageFile( stream,  applicationVersionId,  packageId,  filepath,  contentType);
		///   var fileMetadataClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata> UpdatePackageFileClient(System.IO.Stream stream, int applicationVersionId, int packageId, string filepath, String  contentType= null)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.UpdatePackageFileUrl(applicationVersionId, filepath, packageId);
			const string verb = "PUT";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata>()
									.WithVerb(verb).WithResourceUrl(url)
									.WithBody(stream)									.WithHeader(Headers.CONTENT_TYPE ,contentType)
;
			return mozuClient;

		}

		/// <summary>
		/// Deletes the specified file from a package associated with an application version.
		/// </summary>
		/// <param name="applicationVersionId">Unique identifier of the application version.</param>
		/// <param name="filepath">The file path and name of the file location to delete from the package.</param>
		/// <param name="packageId">Unique identifier of the package.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=DeletePackageFile( applicationVersionId,  packageId,  filepath);
		///mozuClient.WithBaseAddress(url).Execute();
		/// </code>
		/// </example>
		public static MozuClient DeletePackageFileClient(int applicationVersionId, int packageId, string filepath)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.DeletePackageFileUrl(applicationVersionId, filepath, packageId);
			const string verb = "DELETE";
			var mozuClient = new MozuClient()
									.WithVerb(verb).WithResourceUrl(url)
;
			return mozuClient;

		}


	}

}


