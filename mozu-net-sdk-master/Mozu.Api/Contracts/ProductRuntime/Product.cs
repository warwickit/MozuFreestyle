
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

namespace Mozu.Api.Contracts.ProductRuntime
{
		///
		///	Properties of the product that appears on a designated storefront.
		///
		public class Product
		{
			///
			///Date and time when the entity was created, represented in UTC Date/Time.
			///
			public DateTime CreateDate { get; set; }

			public List<string> FulfillmentTypesSupported { get; set; }

			///
			///If true, the product is marked as available for sale. Setting a product to IsActive = false will prevent it from being shown on the customer facing storefront.
			///
			public bool? IsActive { get; set; }

			public bool? IsPackagedStandAlone { get; set; }

			///
			///If true, the product can be purchased or fulfilled at regular intervals such as a monthly billing cycle or a digital or physical subscription.
			///
			public bool IsRecurring { get; set; }

			///
			///If true, the entity is subject to tax based on the relevant tax rate.
			///
			public bool IsTaxable { get; set; }

			public string MfgPartNumber { get; set; }

			public List<string> MfgPartNumbers { get; set; }

			///
			///Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.
			///
			public string ProductCode { get; set; }

			///
			///Integer that represents the sequential order of the product.
			///
			public int? ProductSequence { get; set; }

			///
			///A product type is like a product template that can be reused.
			///
			public string ProductType { get; set; }

			public string ProductUsage { get; set; }

			///
			///The publishing state of the product definition in the master catalog, which is "New", "Draft", or "Live".
			///
			public string PublishState { get; set; }

			///
			///The universal product code (UPC code) of the product.
			///
			public string Upc { get; set; }

			public List<string> UpCs { get; set; }

			///
			///Product code that represents the product variation selected based on the option values the shopper entered.
			///
			public string VariationProductCode { get; set; }

			///
			///List of shipping discounts that can be applied to the product.
			///
			public List<Discount> AvailableShippingDiscounts { get; set; }

			public List<BundledProduct> BundledProducts { get; set; }

			///
			///List of categories associated with the product.
			///
			public List<Category> Categories { get; set; }

			///
			///Complex type that contains content for a language specified by LocaleCode.
			///
			public ProductContent Content { get; set; }

			///
			///Array of active inventory level information associated with the product.
			///
			public ProductInventoryInfo InventoryInfo { get; set; }

			///
			///Dimensions of the packaged product.
			///
			public PackageMeasurements Measurements { get; set; }

			///
			///The list of options set up in product admin.
			///
			public List<ProductOption> Options { get; set; }

			///
			///Price that the merchant intends to sell the product which is not necessarily the list price. This is the price the merchant intends to sell the product if no sale price is present.
			///
			public ProductPrice Price { get; set; }

			///
			///For products with options that vary the cost of the product, the range between lowest and highest possible price of the product based on the current selection of options.
			///
			public ProductPriceRange PriceRange { get; set; }

			public ProductPricingBehaviorInfo PricingBehavior { get; set; }

			///
			///The list of product properties set up in product admin.
			///
			public List<ProductProperty> Properties { get; set; }

			///
			///The current state of the configured product determines whether or not the product is eligible for purchase. Products with options are only purchasable if the shopper has selected all required options. If the product is not ready for purchase, a message lists missing options that are required.
			///
			public ProductPurchasableState PurchasableState { get; set; }

		}

}