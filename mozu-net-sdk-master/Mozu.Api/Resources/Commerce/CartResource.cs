
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;


namespace Mozu.Api.Resources.Commerce
{
	/// <summary>
	/// Use the Carts resource to manage storefront shopping carts as items are added and removed. Each time a shopper's cart is modified, the Carts resource updates the estimated total with any applicable discounts.
	/// </summary>
	public partial class CartResource  	{
		///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;

		public CartResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		
		/// <summary>
		/// Retrieves the cart specified in the request.
		/// </summary>
		/// <param name="cartId">Identifier of the cart to retrieve.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Carts.Cart"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var cart = new Cart();
		///   var cart = cart.GetCart( cartId);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.CommerceRuntime.Carts.Cart GetCart(string cartId)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Carts.Cart> response;
			var client = Mozu.Api.Clients.Commerce.CartClient.GetCartClient( cartId);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieves a cart's contents for the current shopper. If the shopper does not have an active cart on the site, the service creates one.
		/// </summary>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Carts.Cart"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var cart = new Cart();
		///   var cart = cart.GetOrCreateCart();
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.CommerceRuntime.Carts.Cart GetOrCreateCart()
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Carts.Cart> response;
			var client = Mozu.Api.Clients.Commerce.CartClient.GetOrCreateCartClient();
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieves summary information associated with the cart of the current shopper, including the number of items, the current total, and whether the cart has expired. All anonymous idle carts that do not proceed to checkout expire after 14 days.
		/// </summary>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Carts.CartSummary"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var cart = new Cart();
		///   var cartSummary = cart.GetCartSummary();
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.CommerceRuntime.Carts.CartSummary GetCartSummary()
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Carts.CartSummary> response;
			var client = Mozu.Api.Clients.Commerce.CartClient.GetCartSummaryClient();
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieves the cart of the user specified in the request.
		/// </summary>
		/// <param name="userId">Unique identifier of the user whose cart you want to retrieve.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Carts.Cart"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var cart = new Cart();
		///   var cart = cart.GetUserCart( userId);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.CommerceRuntime.Carts.Cart GetUserCart(string userId)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Carts.Cart> response;
			var client = Mozu.Api.Clients.Commerce.CartClient.GetUserCartClient( userId);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieves summary information associated with the cart of user specified in the request, including the number of items in the cart, the current total, and whether the cart has expired. All anonymous idle carts that do not proceed to checkout expire after 14 days.
		/// </summary>
		/// <param name="userId">Unique identifier of the user whose cart details you want to retrieve.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Carts.CartSummary"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var cart = new Cart();
		///   var cartSummary = cart.GetUserCartSummary( userId);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.CommerceRuntime.Carts.CartSummary GetUserCartSummary(string userId)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Carts.CartSummary> response;
			var client = Mozu.Api.Clients.Commerce.CartClient.GetUserCartSummaryClient( userId);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Update the current shopper's cart.
		/// </summary>
		/// <param name="cart">All of the properties of the cart to update. The product code is required.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Carts.Cart"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var cart = new Cart();
		///   var cart = cart.UpdateCart( cart);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.CommerceRuntime.Carts.Cart UpdateCart(Mozu.Api.Contracts.CommerceRuntime.Carts.Cart cart)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Carts.Cart> response;
			var client = Mozu.Api.Clients.Commerce.CartClient.UpdateCartClient( cart);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Deletes the cart specified in the request.
		/// </summary>
		/// <param name="cartId">Identifier of the cart to delete.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var cart = new Cart();
		///   cart.DeleteCart( cartId);
		/// </code>
		/// </example>
		public virtual void DeleteCart(string cartId)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.CartClient.DeleteCartClient( cartId);
			client.WithContext(_apiContext);
			response= client.Execute();

		}

		/// <summary>
		/// Deletes the cart of the currently active shopper.
		/// </summary>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var cart = new Cart();
		///   cart.DeleteCurrentCart();
		/// </code>
		/// </example>
		public virtual void DeleteCurrentCart()
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.CartClient.DeleteCurrentCartClient();
			client.WithContext(_apiContext);
			response= client.Execute();

		}


	}

}


