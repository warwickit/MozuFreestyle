
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;


namespace Mozu.Api.Resources.Commerce.Catalog.Admin
{
	/// <summary>
	/// Use this resource to create products, view the attributes associated with existing products, and determine which sites feature a specific product.
	/// </summary>
	public partial class ProductResource  	{
		///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;

		public ProductResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		
		/// <summary>
		/// Retrieves a list of products according to any specified facets, filter criteria, and sort options.
		/// </summary>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductAdmin.ProductCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var product = new Product();
		///   var productCollection = product.GetProducts(dataViewMode);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.ProductAdmin.ProductCollection GetProducts(DataViewMode dataViewMode)
		{
			return GetProducts(dataViewMode,  null,  null,  null,  null,  null,  null,  null);
		}

		/// <summary>
		/// Retrieves a list of products according to any specified facets, filter criteria, and sort options.
		/// </summary>
		/// <param name="filter">A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"</param>
		/// <param name="noCount">If true, the operation does not return the TotalCount number of results.</param>
		/// <param name="pageSize">The number of results to display on each page when creating paged results from a query. The maximum value is 200.</param>
		/// <param name="q">A list of product search terms to use in the query when searching across product code and product name. Separate multiple search terms with a space character.</param>
		/// <param name="qLimit">The maximum number of search results to return in the response. You can limit any range between 1-100.</param>
		/// <param name="sortBy"></param>
		/// <param name="startIndex"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductAdmin.ProductCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var product = new Product();
		///   var productCollection = product.GetProducts(dataViewMode,  startIndex,  pageSize,  sortBy,  filter,  q,  qLimit,  noCount);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.ProductAdmin.ProductCollection GetProducts(DataViewMode dataViewMode, int? startIndex =  null, int? pageSize =  null, string sortBy =  null, string filter =  null, string q =  null, int? qLimit =  null, bool? noCount =  null)
		{
			MozuClient<Mozu.Api.Contracts.ProductAdmin.ProductCollection> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.ProductClient.GetProductsClient(dataViewMode,  startIndex,  pageSize,  sortBy,  filter,  q,  qLimit,  noCount);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieves an existing product.
		/// </summary>
		/// <param name="productCode">Merchant-created code associated with the product such as a SKU. Max length: 30. Accepts a to z, A to Z, Ãƒâ€¹-ÃƒËœ, 0 to 9, #, semicolon, commas, apostrophes, and Spaces, but no punctuation or other characters.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductAdmin.Product"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var product = new Product();
		///   var product = product.GetProduct(dataViewMode,  productCode);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.ProductAdmin.Product GetProduct(DataViewMode dataViewMode, string productCode)
		{
			MozuClient<Mozu.Api.Contracts.ProductAdmin.Product> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.ProductClient.GetProductClient(dataViewMode,  productCode);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieves a product that is associated with one or more specific catalogs.
		/// </summary>
		/// <param name="productCode">Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.</param>
		/// <returns>
		/// List{<see cref="Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var product = new Product();
		///   var productInCatalogInfo = product.GetProductInCatalogs(dataViewMode,  productCode);
		/// </code>
		/// </example>
		public virtual List<Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo> GetProductInCatalogs(DataViewMode dataViewMode, string productCode)
		{
			MozuClient<List<Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo>> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.ProductClient.GetProductInCatalogsClient(dataViewMode,  productCode);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieves the details of a product associated with a specific catalog.
		/// </summary>
		/// <param name="catalogId"></param>
		/// <param name="productCode">Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var product = new Product();
		///   var productInCatalogInfo = product.GetProductInCatalog(dataViewMode,  productCode,  catalogId);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo GetProductInCatalog(DataViewMode dataViewMode, string productCode, int catalogId)
		{
			MozuClient<Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.ProductClient.GetProductInCatalogClient(dataViewMode,  productCode,  catalogId);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Creates a new product definition in the specified master catalog.
		/// </summary>
		/// <param name="product">Properties of the new product. You must supply values for the product code, product name, and price.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductAdmin.Product"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var product = new Product();
		///   var product = product.AddProduct(dataViewMode,  product);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.ProductAdmin.Product AddProduct(DataViewMode dataViewMode, Mozu.Api.Contracts.ProductAdmin.Product product)
		{
			MozuClient<Mozu.Api.Contracts.ProductAdmin.Product> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.ProductClient.AddProductClient(dataViewMode,  product);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Associates a new product defined in the master catalog with a specific catalog.
		/// </summary>
		/// <param name="productCode">Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.</param>
		/// <param name="productInCatalogInfoIn">Properties of the product to define for the specific catalog association.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var product = new Product();
		///   var productInCatalogInfo = product.AddProductInCatalog(dataViewMode,  productInCatalogInfoIn,  productCode);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo AddProductInCatalog(DataViewMode dataViewMode, Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo productInCatalogInfoIn, string productCode)
		{
			MozuClient<Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.ProductClient.AddProductInCatalogClient(dataViewMode,  productInCatalogInfoIn,  productCode);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Updates one or more properties of a product definition in a master catalog.
		/// </summary>
		/// <param name="productCode">Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.</param>
		/// <param name="product">Properties of the product definition to update in the master catalog.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductAdmin.Product"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var product = new Product();
		///   var product = product.UpdateProduct(dataViewMode,  product,  productCode);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.ProductAdmin.Product UpdateProduct(DataViewMode dataViewMode, Mozu.Api.Contracts.ProductAdmin.Product product, string productCode)
		{
			MozuClient<Mozu.Api.Contracts.ProductAdmin.Product> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.ProductClient.UpdateProductClient(dataViewMode,  product,  productCode);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Updates the properties of a product specific to each catalog associated with the product.
		/// </summary>
		/// <param name="productCode">Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.</param>
		/// <param name="productInCatalogsIn">Properties of the product to update for each associated catalog.</param>
		/// <returns>
		/// List{<see cref="Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var product = new Product();
		///   var productInCatalogInfo = product.UpdateProductInCatalogs(dataViewMode,  productInCatalogsIn,  productCode);
		/// </code>
		/// </example>
		public virtual List<Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo> UpdateProductInCatalogs(DataViewMode dataViewMode, List<Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo> productInCatalogsIn, string productCode)
		{
			MozuClient<List<Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo>> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.ProductClient.UpdateProductInCatalogsClient(dataViewMode,  productInCatalogsIn,  productCode);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Updates one or more properties of a product associated with a specific catalog.
		/// </summary>
		/// <param name="catalogId"></param>
		/// <param name="productCode">Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.</param>
		/// <param name="productInCatalogInfoIn">Properties of the product associated with the catalog specified in the request.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var product = new Product();
		///   var productInCatalogInfo = product.UpdateProductInCatalog(dataViewMode,  productInCatalogInfoIn,  productCode,  catalogId);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo UpdateProductInCatalog(DataViewMode dataViewMode, Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo productInCatalogInfoIn, string productCode, int catalogId)
		{
			MozuClient<Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.ProductClient.UpdateProductInCatalogClient(dataViewMode,  productInCatalogInfoIn,  productCode,  catalogId);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Deletes the specified product from a master catalog.
		/// </summary>
		/// <param name="productCode"></param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var product = new Product();
		///   product.DeleteProduct(dataViewMode,  productCode);
		/// </code>
		/// </example>
		public virtual void DeleteProduct(DataViewMode dataViewMode, string productCode)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.ProductClient.DeleteProductClient(dataViewMode,  productCode);
			client.WithContext(_apiContext);
			response= client.Execute();

		}

		/// <summary>
		/// Removes the product association defined for a specific catalog.
		/// </summary>
		/// <param name="catalogId"></param>
		/// <param name="productCode">Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var product = new Product();
		///   product.DeleteProductInCatalog(dataViewMode,  productCode,  catalogId);
		/// </code>
		/// </example>
		public virtual void DeleteProductInCatalog(DataViewMode dataViewMode, string productCode, int catalogId)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.ProductClient.DeleteProductInCatalogClient(dataViewMode,  productCode,  catalogId);
			client.WithContext(_apiContext);
			response= client.Execute();

		}


	}

}


