
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;


namespace Mozu.Api.Resources.Commerce.Catalog.Storefront
{
	/// <summary>
	/// Provide dynamic search results to shoppers as they browse and search for products on the storefront. Suggest possible search terms as the shopper enters text.
	/// </summary>
	public partial class ProductSearchResultResource  	{
		///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;

		public ProductSearchResultResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		
		/// <summary>
		/// Searches the categories displayed on the storefront for products or product options that the shopper types in a search query.
		/// </summary>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductRuntime.ProductSearchResult"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var productsearchresult = new ProductSearchResult();
		///   var productSearchResult = productsearchresult.Search();
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.ProductRuntime.ProductSearchResult Search()
		{
			return Search( null,  null,  null,  null,  null,  null,  null,  null,  null,  null,  null,  null,  null,  null,  null,  null);
		}

		/// <summary>
		/// Searches the categories displayed on the storefront for products or product options that the shopper types in a search query.
		/// </summary>
		/// <param name="facet">Individually list the facet fields you want to display in a storefront product search.</param>
		/// <param name="facetFieldRangeQuery">Display a range facet not specified in a template in a storefront product search by listing the facet field and the range to display.</param>
		/// <param name="facetHierDepth">If filtering using category facets in a hierarchy, the number of category hierarchy levels to return for the facet. This option is only available for category facets.</param>
		/// <param name="facetHierPrefix">If filtering using category facets in a hierarchy, the parent categories you want to skip in the storefront product search. This parameter is only available for category facets.</param>
		/// <param name="facetHierValue">If filtering using category facets in a hierarchy, the category in the hierarchy to begin faceting on. This parameter is only available for category facets.</param>
		/// <param name="facetPageSize">The number of facet values to return for one or more facets.</param>
		/// <param name="facetSettings">Settings reserved for future facet search functionality on a storefront product search.</param>
		/// <param name="facetStartIndex">When paging through multiple facets, the startIndex value for each facet.</param>
		/// <param name="facetTemplate">The facet template to use on the storefront. A template displays all facets associated with the template on the storefront product search. Currently, only category-level facet templates are available.</param>
		/// <param name="facetTemplateSubset">Display a subset of the facets defined in the template specified in facetTemplate parameter.</param>
		/// <param name="facetValueFilter">The facet values to apply to the filter.</param>
		/// <param name="filter">A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. You can filter product search results by any of its properties, including product code, type, category, and name. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=categoryId+eq+12"</param>
		/// <param name="pageSize">The number of results to display on each page when creating paged results from a query. The maximum value is 200.</param>
		/// <param name="query">The terms to search on.</param>
		/// <param name="sortBy"></param>
		/// <param name="startIndex"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductRuntime.ProductSearchResult"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var productsearchresult = new ProductSearchResult();
		///   var productSearchResult = productsearchresult.Search( query,  filter,  facetTemplate,  facetTemplateSubset,  facet,  facetFieldRangeQuery,  facetHierPrefix,  facetHierValue,  facetHierDepth,  facetStartIndex,  facetPageSize,  facetSettings,  facetValueFilter,  sortBy,  pageSize,  startIndex);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.ProductRuntime.ProductSearchResult Search(string query =  null, string filter =  null, string facetTemplate =  null, string facetTemplateSubset =  null, string facet =  null, string facetFieldRangeQuery =  null, string facetHierPrefix =  null, string facetHierValue =  null, string facetHierDepth =  null, string facetStartIndex =  null, string facetPageSize =  null, string facetSettings =  null, string facetValueFilter =  null, string sortBy =  null, int? pageSize =  null, int? startIndex =  null)
		{
			MozuClient<Mozu.Api.Contracts.ProductRuntime.ProductSearchResult> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Storefront.ProductSearchResultClient.SearchClient( query,  filter,  facetTemplate,  facetTemplateSubset,  facet,  facetFieldRangeQuery,  facetHierPrefix,  facetHierValue,  facetHierDepth,  facetStartIndex,  facetPageSize,  facetSettings,  facetValueFilter,  sortBy,  pageSize,  startIndex);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Suggests possible search terms as the shopper enters search text.
		/// </summary>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductRuntime.SearchSuggestion"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var productsearchresult = new ProductSearchResult();
		///   var searchSuggestion = productsearchresult.Suggest();
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.ProductRuntime.SearchSuggestion Suggest()
		{
			return Suggest( null,  null);
		}

		/// <summary>
		/// Suggests possible search terms as the shopper enters search text.
		/// </summary>
		/// <param name="pageSize">The number of results to display on each page when creating paged results from a query. The maximum value is 200.</param>
		/// <param name="q">Text that the shopper is currently entering.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductRuntime.SearchSuggestion"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var productsearchresult = new ProductSearchResult();
		///   var searchSuggestion = productsearchresult.Suggest( q,  pageSize);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.ProductRuntime.SearchSuggestion Suggest(string q =  null, int? pageSize =  null)
		{
			MozuClient<Mozu.Api.Contracts.ProductRuntime.SearchSuggestion> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Storefront.ProductSearchResultClient.SuggestClient( q,  pageSize);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}


	}

}


