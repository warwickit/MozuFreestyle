
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

using Mozu.Api.Contracts.Core;

namespace Mozu.Api.Contracts.CommerceRuntime.Payments
{
		///
		///	Properties of a resulting payment interaction that occurs when a payment action is performed.
		///
		public class PaymentInteraction
		{
			///
			///If applicable, the total monetary amount associated with this payment interaction.
			///
			public decimal? Amount { get; set; }

			///
			///Identifier and datetime stamp information recorded when a user or application creates, updates, or deletes a resource entity. This value is system-supplied and read-only.
			///
			public AuditInfo AuditInfo { get; set; }

			///
			///If applicable, the check number associated with the payment action or interaction.
			///
			public string CheckNumber { get; set; }

			///
			///3-letter ISO 4217 standard global currency code. Currently, only "USD" (US Dollar) is supported.
			///
			public string CurrencyCode { get; set; }

			///
			///If required by the payment gateway, the authorization code of the transaction.
			///
			public string GatewayAuthCode { get; set; }

			///
			///AVS (Address Verification Service) codes supplied by the payment gateway. The codes indicate partial to complete or failed matches against the billing address for the shopper against the financial institute data through the gateway.
			///
			public string GatewayAVSCodes { get; set; }

			///
			///CVV2 (Card Verification Value) codes supplied by the payment gateway. The codes indicate a verified or failed match of the encrypted code entered against the financial institution data through the gateway.
			///
			public string GatewayCVV2Codes { get; set; }

			///
			///Unique identifier of the payment interaction from the payment gateway.
			///
			public int? GatewayInteractionId { get; set; }

			///
			///Response code from the gateway associated with the payment interaction. For example, if the gateway returns "Not Authorized," an interaction for voiding the payment transaction would result.
			///
			public string GatewayResponseCode { get; set; }

			///
			///Textual message returned by the payment gateway for the associated success or failure code.
			///
			public string GatewayResponseText { get; set; }

			///
			///Unique identifier of the gateway transaction associated with the payment interaction.
			///
			public string GatewayTransactionId { get; set; }

			///
			///Unique identifier of the source product property. For a product field it will be the name of the field. For a product attribute it will be the Attribute FQN. 
			///
			public string Id { get; set; }

			///
			///Date and time of a payment interaction, including handling and processing a payment and validating and completing a payment with a payment gateway.
			///
			public DateTime? InteractionDate { get; set; }

			///
			///The type of payment interaction. The payment can be Capture or CheckReceived. The value also includes customer payment interactions such as Website, Call, Store, or Unknown.
			///
			public string InteractionType { get; set; }

			///
			///If true, the payment interaction was manually defined s part of offline order processing.
			///
			public bool IsManual { get; set; }

			///
			///Indicates if the product in a cart, order, or wish list is purchased on a recurring schedule. If true, the item can be purchased or fulfilled at regular intervals, such as a monthly billing cycle. For example, digital or physical product subscriptions are recurring cart items. This property is not used at this time and is reserved for future functionality.
			///
			public bool? IsRecurring { get; set; }

			///
			///User-entered notation content for an object, used to save information such as payment, return, account, and order notes.
			///
			public string Note { get; set; }

			///
			///Unique identifier of the order associated with the payment.
			///
			public string OrderId { get; set; }

			///
			///The status of the payment prior to the interaction being performed, which enables manual rollback of previous transactions.
			///
			public string PaymentEntryStatus { get; set; }

			///
			///Unique identifier of the payment associated with this transaction.
			///
			public string PaymentId { get; set; }

			///
			///Unique identifier of previous interaction that this payment interaction is modifying. For example, when refunding a payment, the crediting interaction would reference the capture interaction.
			///
			public int? PaymentTransactionInteractionIdReference { get; set; }

			///
			///The current status of an object. This status is specific to the object including payment (New, Authorized, Captured, Declined, Failed, Voided, Credited, CheckRequested, or RolledBack), discount (Active, Scheduled, or Expired), returns (ReturnAuthorized), tenant, package (Fulfilled or NotFulfilled), application, master and product catalogs, orders (Pending, Submitted, Processing, Pending Review, Closed, or Canceled), and order validation results (Pass, Fail, Error, or Review).
			///
			public string Status { get; set; }

		}

}