
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;

namespace Mozu.Api.Clients.Commerce.Orders
{
	/// <summary>
	/// A digital package is a package in a digital format.
	/// </summary>
	public partial class DigitalPackageClient 	{
		
		/// <summary>
		/// Retrieves a collection of fulfillment options for digital packages. Options may include emailed files/links or provided links. 
		/// </summary>
		/// <param name="digitalPackageId">This parameter supplies package ID to get fulfillment actions for the digital package.</param>
		/// <param name="orderId">Unique identifier of the order.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{List{string}}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetAvailableDigitalPackageFulfillmentActions( orderId,  digitalPackageId);
		///   var stringClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<List<string>> GetAvailableDigitalPackageFulfillmentActionsClient(string orderId, string digitalPackageId)
		{
			var url = Mozu.Api.Urls.Commerce.Orders.DigitalPackageUrl.GetAvailableDigitalPackageFulfillmentActionsUrl(orderId, digitalPackageId);
			const string verb = "GET";
			var mozuClient = new MozuClient<List<string>>()
									.WithVerb(verb).WithResourceUrl(url)
;
			return mozuClient;

		}

		/// <summary>
		/// This operation retreives a digital package within an order and it requires two parameters: orderId and digitalPackageId.
		/// </summary>
		/// <param name="digitalPackageId">This parameter supplies package ID to get fulfillment actions for the digital package.</param>
		/// <param name="orderId">Unique identifier of the order.</param>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetDigitalPackage( orderId,  digitalPackageId,  responseFields);
		///   var digitalPackageClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage> GetDigitalPackageClient(string orderId, string digitalPackageId, string responseFields =  null)
		{
			var url = Mozu.Api.Urls.Commerce.Orders.DigitalPackageUrl.GetDigitalPackageUrl(orderId, digitalPackageId, responseFields);
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage>()
									.WithVerb(verb).WithResourceUrl(url)
;
			return mozuClient;

		}

		/// <summary>
		/// Lets you apply a digital package to the order using the orderId and digitalPackage parameters.
		/// </summary>
		/// <param name="orderId">Unique identifier of the order.</param>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="digitalPackage">Lets you manage an order's digital packages, by applying a digital package to the order.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=CreateDigitalPackage( digitalPackage,  orderId,  responseFields);
		///   var digitalPackageClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage> CreateDigitalPackageClient(Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage digitalPackage, string orderId, string responseFields =  null)
		{
			var url = Mozu.Api.Urls.Commerce.Orders.DigitalPackageUrl.CreateDigitalPackageUrl(orderId, responseFields);
			const string verb = "POST";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage>()
									.WithVerb(verb).WithResourceUrl(url)
									.WithBody<Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage>(digitalPackage);
			return mozuClient;

		}

		/// <summary>
		/// This method operates on one digital package, specified by the id given. This method ensures that the digital package ID provided is in the order with the id given, and then updates the properties of that package with the properties of the one passed in using the ‘digitalpackage’ parameter.
		/// </summary>
		/// <param name="digitalPackageId">This parameter supplies package ID to get fulfillment actions for the digital package.</param>
		/// <param name="orderId">Unique identifier of the order.</param>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="digitalPackage">Lets you manage an order's digital packages, by applying a digital package to the order.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=UpdateDigitalPackage( digitalPackage,  orderId,  digitalPackageId,  responseFields);
		///   var digitalPackageClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage> UpdateDigitalPackageClient(Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage digitalPackage, string orderId, string digitalPackageId, string responseFields =  null)
		{
			var url = Mozu.Api.Urls.Commerce.Orders.DigitalPackageUrl.UpdateDigitalPackageUrl(orderId, digitalPackageId, responseFields);
			const string verb = "PUT";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage>()
									.WithVerb(verb).WithResourceUrl(url)
									.WithBody<Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage>(digitalPackage);
			return mozuClient;

		}

		/// <summary>
		/// This operation deletes a digital package from an order. This operation requires three parameters: orderId, digitalPackageId, and digitalPackage.
		/// </summary>
		/// <param name="digitalPackageId">This parameter supplies package ID to get fulfillment actions for the digital package.</param>
		/// <param name="orderId">Unique identifier of the order.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=DeleteDigitalPackage( orderId,  digitalPackageId);
		///mozuClient.WithBaseAddress(url).Execute();
		/// </code>
		/// </example>
		public static MozuClient DeleteDigitalPackageClient(string orderId, string digitalPackageId)
		{
			var url = Mozu.Api.Urls.Commerce.Orders.DigitalPackageUrl.DeleteDigitalPackageUrl(orderId, digitalPackageId);
			const string verb = "DELETE";
			var mozuClient = new MozuClient()
									.WithVerb(verb).WithResourceUrl(url)
;
			return mozuClient;

		}


	}

}


