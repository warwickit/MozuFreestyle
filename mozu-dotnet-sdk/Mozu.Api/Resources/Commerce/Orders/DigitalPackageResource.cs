
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;

namespace Mozu.Api.Resources.Commerce.Orders
{
	/// <summary>
	/// A digital package is a package in a digital format.
	/// </summary>
	public partial class DigitalPackageResource  	{
		///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;

		
		public DigitalPackageResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		public DigitalPackageResource CloneWithApiContext(Action<IApiContext> contextModification) 
		{
			return new DigitalPackageResource(_apiContext.CloneWith(contextModification));
		}

				
		/// <summary>
		/// Retrieves a collection of fulfillment options for digital packages. Options may include emailed files/links or provided links. 
		/// </summary>
		/// <param name="digitalPackageId">This parameter supplies package ID to get fulfillment actions for the digital package.</param>
		/// <param name="orderId">Unique identifier of the order.</param>
		/// <returns>
		/// List{string}
		/// </returns>
		/// <example>
		/// <code>
		///   var digitalpackage = new DigitalPackage();
		///   var string = digitalpackage.GetAvailableDigitalPackageFulfillmentActions( orderId,  digitalPackageId);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual List<string> GetAvailableDigitalPackageFulfillmentActions(string orderId, string digitalPackageId)
		{
			MozuClient<List<string>> response;
			var client = Mozu.Api.Clients.Commerce.Orders.DigitalPackageClient.GetAvailableDigitalPackageFulfillmentActionsClient( orderId,  digitalPackageId);
			client.WithContext(_apiContext);
			response = client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieves a collection of fulfillment options for digital packages. Options may include emailed files/links or provided links. 
		/// </summary>
		/// <param name="digitalPackageId">This parameter supplies package ID to get fulfillment actions for the digital package.</param>
		/// <param name="orderId">Unique identifier of the order.</param>
		/// <returns>
		/// List{string}
		/// </returns>
		/// <example>
		/// <code>
		///   var digitalpackage = new DigitalPackage();
		///   var string = await digitalpackage.GetAvailableDigitalPackageFulfillmentActionsAsync( orderId,  digitalPackageId);
		/// </code>
		/// </example>
		public virtual async Task<List<string>> GetAvailableDigitalPackageFulfillmentActionsAsync(string orderId, string digitalPackageId)
		{
			MozuClient<List<string>> response;
			var client = Mozu.Api.Clients.Commerce.Orders.DigitalPackageClient.GetAvailableDigitalPackageFulfillmentActionsClient( orderId,  digitalPackageId);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();
			return await response.ResultAsync();

		}

		/// <summary>
		/// This operation retreives a digital package within an order and it requires two parameters: orderId and digitalPackageId.
		/// </summary>
		/// <param name="digitalPackageId">This parameter supplies package ID to get fulfillment actions for the digital package.</param>
		/// <param name="orderId">Unique identifier of the order.</param>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var digitalpackage = new DigitalPackage();
		///   var digitalPackage = digitalpackage.GetDigitalPackage( orderId,  digitalPackageId,  responseFields);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage GetDigitalPackage(string orderId, string digitalPackageId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage> response;
			var client = Mozu.Api.Clients.Commerce.Orders.DigitalPackageClient.GetDigitalPackageClient( orderId,  digitalPackageId,  responseFields);
			client.WithContext(_apiContext);
			response = client.Execute();
			return response.Result();

		}

		/// <summary>
		/// This operation retreives a digital package within an order and it requires two parameters: orderId and digitalPackageId.
		/// </summary>
		/// <param name="digitalPackageId">This parameter supplies package ID to get fulfillment actions for the digital package.</param>
		/// <param name="orderId">Unique identifier of the order.</param>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var digitalpackage = new DigitalPackage();
		///   var digitalPackage = await digitalpackage.GetDigitalPackageAsync( orderId,  digitalPackageId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage> GetDigitalPackageAsync(string orderId, string digitalPackageId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage> response;
			var client = Mozu.Api.Clients.Commerce.Orders.DigitalPackageClient.GetDigitalPackageClient( orderId,  digitalPackageId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();
			return await response.ResultAsync();

		}

		/// <summary>
		/// Lets you apply a digital package to the order using the orderId and digitalPackage parameters.
		/// </summary>
		/// <param name="orderId">Unique identifier of the order.</param>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="digitalPackage">Lets you manage an order's digital packages, by applying a digital package to the order.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var digitalpackage = new DigitalPackage();
		///   var digitalPackage = digitalpackage.CreateDigitalPackage( digitalPackage,  orderId,  responseFields);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage CreateDigitalPackage(Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage digitalPackage, string orderId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage> response;
			var client = Mozu.Api.Clients.Commerce.Orders.DigitalPackageClient.CreateDigitalPackageClient( digitalPackage,  orderId,  responseFields);
			client.WithContext(_apiContext);
			response = client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Lets you apply a digital package to the order using the orderId and digitalPackage parameters.
		/// </summary>
		/// <param name="orderId">Unique identifier of the order.</param>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="digitalPackage">Lets you manage an order's digital packages, by applying a digital package to the order.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var digitalpackage = new DigitalPackage();
		///   var digitalPackage = await digitalpackage.CreateDigitalPackageAsync( digitalPackage,  orderId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage> CreateDigitalPackageAsync(Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage digitalPackage, string orderId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage> response;
			var client = Mozu.Api.Clients.Commerce.Orders.DigitalPackageClient.CreateDigitalPackageClient( digitalPackage,  orderId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();
			return await response.ResultAsync();

		}

		/// <summary>
		/// This method operates on one digital package, specified by the id given. This method ensures that the digital package ID provided is in the order with the id given, and then updates the properties of that package with the properties of the one passed in using the ‘digitalpackage’ parameter.
		/// </summary>
		/// <param name="digitalPackageId">This parameter supplies package ID to get fulfillment actions for the digital package.</param>
		/// <param name="orderId">Unique identifier of the order.</param>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="digitalPackage">Lets you manage an order's digital packages, by applying a digital package to the order.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var digitalpackage = new DigitalPackage();
		///   var digitalPackage = digitalpackage.UpdateDigitalPackage( digitalPackage,  orderId,  digitalPackageId,  responseFields);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage UpdateDigitalPackage(Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage digitalPackage, string orderId, string digitalPackageId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage> response;
			var client = Mozu.Api.Clients.Commerce.Orders.DigitalPackageClient.UpdateDigitalPackageClient( digitalPackage,  orderId,  digitalPackageId,  responseFields);
			client.WithContext(_apiContext);
			response = client.Execute();
			return response.Result();

		}

		/// <summary>
		/// This method operates on one digital package, specified by the id given. This method ensures that the digital package ID provided is in the order with the id given, and then updates the properties of that package with the properties of the one passed in using the ‘digitalpackage’ parameter.
		/// </summary>
		/// <param name="digitalPackageId">This parameter supplies package ID to get fulfillment actions for the digital package.</param>
		/// <param name="orderId">Unique identifier of the order.</param>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="digitalPackage">Lets you manage an order's digital packages, by applying a digital package to the order.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var digitalpackage = new DigitalPackage();
		///   var digitalPackage = await digitalpackage.UpdateDigitalPackageAsync( digitalPackage,  orderId,  digitalPackageId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage> UpdateDigitalPackageAsync(Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage digitalPackage, string orderId, string digitalPackageId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage> response;
			var client = Mozu.Api.Clients.Commerce.Orders.DigitalPackageClient.UpdateDigitalPackageClient( digitalPackage,  orderId,  digitalPackageId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();
			return await response.ResultAsync();

		}

		/// <summary>
		/// This operation deletes a digital package from an order. This operation requires three parameters: orderId, digitalPackageId, and digitalPackage.
		/// </summary>
		/// <param name="digitalPackageId">This parameter supplies package ID to get fulfillment actions for the digital package.</param>
		/// <param name="orderId">Unique identifier of the order.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var digitalpackage = new DigitalPackage();
		///   digitalpackage.DeleteDigitalPackage( orderId,  digitalPackageId);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual void DeleteDigitalPackage(string orderId, string digitalPackageId)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Orders.DigitalPackageClient.DeleteDigitalPackageClient( orderId,  digitalPackageId);
			client.WithContext(_apiContext);
			response = client.Execute();

		}

		/// <summary>
		/// This operation deletes a digital package from an order. This operation requires three parameters: orderId, digitalPackageId, and digitalPackage.
		/// </summary>
		/// <param name="digitalPackageId">This parameter supplies package ID to get fulfillment actions for the digital package.</param>
		/// <param name="orderId">Unique identifier of the order.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var digitalpackage = new DigitalPackage();
		///   await digitalpackage.DeleteDigitalPackageAsync( orderId,  digitalPackageId);
		/// </code>
		/// </example>
		public virtual async Task DeleteDigitalPackageAsync(string orderId, string digitalPackageId)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Orders.DigitalPackageClient.DeleteDigitalPackageClient( orderId,  digitalPackageId);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();

		}


	}

}


