
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;

namespace Mozu.Api.Resources.Commerce
{
	/// <summary>
	/// Use the Returns resource to manage returned items that were previously fufilled. Returns can include any number of items associated with an original Mozu order. Each return must either be associated with an original order or a product definition to represent each returned item.
	/// </summary>
	public partial class ReturnResource  	{
		///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;

		
		public ReturnResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		public ReturnResource CloneWithApiContext(Action<IApiContext> contextModification) 
		{
			return new ReturnResource(_apiContext.CloneWith(contextModification));
		}

				
		/// <summary>
		/// Retrieves a list of all returns according to any filter and sort criteria.
		/// </summary>
		/// <param name="filter">A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"</param>
		/// <param name="pageSize">The number of results to display on each page when creating paged results from a query. The maximum value is 200.</param>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="sortBy">The property by which to sort results and whether the results appear in ascending (a-z) order, represented by ASC or in descending (z-a) order, represented by DESC. The sortBy parameter follows an available property. For example: "sortBy=productCode+asc"</param>
		/// <param name="startIndex">When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, use startIndex=3.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   var returnCollection = return.GetReturns( startIndex,  pageSize,  sortBy,  filter,  responseFields);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnCollection GetReturns(int? startIndex =  null, int? pageSize =  null, string sortBy =  null, string filter =  null, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnCollection> response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.GetReturnsClient( startIndex,  pageSize,  sortBy,  filter,  responseFields);
			client.WithContext(_apiContext);
			response = client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieves a list of all returns according to any filter and sort criteria.
		/// </summary>
		/// <param name="filter">A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"</param>
		/// <param name="pageSize">The number of results to display on each page when creating paged results from a query. The maximum value is 200.</param>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="sortBy">The property by which to sort results and whether the results appear in ascending (a-z) order, represented by ASC or in descending (z-a) order, represented by DESC. The sortBy parameter follows an available property. For example: "sortBy=productCode+asc"</param>
		/// <param name="startIndex">When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, use startIndex=3.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   var returnCollection = await return.GetReturnsAsync( startIndex,  pageSize,  sortBy,  filter,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnCollection> GetReturnsAsync(int? startIndex =  null, int? pageSize =  null, string sortBy =  null, string filter =  null, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnCollection> response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.GetReturnsClient( startIndex,  pageSize,  sortBy,  filter,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();
			return await response.ResultAsync();

		}

		/// <summary>
		/// Retrieves a list of the actions available to perform for the specified return based on its current state.
		/// </summary>
		/// <param name="returnId">Unique identifier of the return whose items you want to get.</param>
		/// <returns>
		/// List{string}
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   var string = return.GetAvailableReturnActions( returnId);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual List<string> GetAvailableReturnActions(string returnId)
		{
			MozuClient<List<string>> response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.GetAvailableReturnActionsClient( returnId);
			client.WithContext(_apiContext);
			response = client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieves a list of the actions available to perform for the specified return based on its current state.
		/// </summary>
		/// <param name="returnId">Unique identifier of the return whose items you want to get.</param>
		/// <returns>
		/// List{string}
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   var string = await return.GetAvailableReturnActionsAsync( returnId);
		/// </code>
		/// </example>
		public virtual async Task<List<string>> GetAvailableReturnActionsAsync(string returnId)
		{
			MozuClient<List<string>> response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.GetAvailableReturnActionsClient( returnId);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();
			return await response.ResultAsync();

		}

		/// <summary>
		/// Retrieves the details of a single return item.
		/// </summary>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="returnId">Unique identifier of the return whose items you want to get.</param>
		/// <param name="returnItemId">Unique identifier of the return item whose details you want to get.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnItem"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   var returnItem = return.GetReturnItem( returnId,  returnItemId,  responseFields);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnItem GetReturnItem(string returnId, string returnItemId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnItem> response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.GetReturnItemClient( returnId,  returnItemId,  responseFields);
			client.WithContext(_apiContext);
			response = client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieves the details of a single return item.
		/// </summary>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="returnId">Unique identifier of the return whose items you want to get.</param>
		/// <param name="returnItemId">Unique identifier of the return item whose details you want to get.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnItem"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   var returnItem = await return.GetReturnItemAsync( returnId,  returnItemId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnItem> GetReturnItemAsync(string returnId, string returnItemId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnItem> response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.GetReturnItemClient( returnId,  returnItemId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();
			return await response.ResultAsync();

		}

		/// <summary>
		/// Retrieves the details of all return items in an order.
		/// </summary>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="returnId">Unique identifier of the return whose items you want to get.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnItemCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   var returnItemCollection = return.GetReturnItems( returnId,  responseFields);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnItemCollection GetReturnItems(string returnId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnItemCollection> response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.GetReturnItemsClient( returnId,  responseFields);
			client.WithContext(_apiContext);
			response = client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieves the details of all return items in an order.
		/// </summary>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="returnId">Unique identifier of the return whose items you want to get.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnItemCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   var returnItemCollection = await return.GetReturnItemsAsync( returnId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnItemCollection> GetReturnItemsAsync(string returnId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnItemCollection> response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.GetReturnItemsClient( returnId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();
			return await response.ResultAsync();

		}

		/// <summary>
		/// Retrieves a list of the payment actions available to perform for the specified return when a return results in a refund to the customer.
		/// </summary>
		/// <param name="paymentId">Unique identifier of the payment for which to perform the action.</param>
		/// <param name="returnId">Unique identifier of the return whose items you want to get.</param>
		/// <returns>
		/// List{string}
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   var string = return.GetAvailablePaymentActionsForReturn( returnId,  paymentId);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual List<string> GetAvailablePaymentActionsForReturn(string returnId, string paymentId)
		{
			MozuClient<List<string>> response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.GetAvailablePaymentActionsForReturnClient( returnId,  paymentId);
			client.WithContext(_apiContext);
			response = client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieves a list of the payment actions available to perform for the specified return when a return results in a refund to the customer.
		/// </summary>
		/// <param name="paymentId">Unique identifier of the payment for which to perform the action.</param>
		/// <param name="returnId">Unique identifier of the return whose items you want to get.</param>
		/// <returns>
		/// List{string}
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   var string = await return.GetAvailablePaymentActionsForReturnAsync( returnId,  paymentId);
		/// </code>
		/// </example>
		public virtual async Task<List<string>> GetAvailablePaymentActionsForReturnAsync(string returnId, string paymentId)
		{
			MozuClient<List<string>> response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.GetAvailablePaymentActionsForReturnClient( returnId,  paymentId);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();
			return await response.ResultAsync();

		}

		/// <summary>
		/// Retrieves the details of a payment submitted as part of a refund associated with a customer return.
		/// </summary>
		/// <param name="paymentId">Unique identifier of the payment for which to perform the action.</param>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="returnId">Unique identifier of the return whose items you want to get.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Payments.Payment"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   var payment = return.GetPayment( returnId,  paymentId,  responseFields);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual Mozu.Api.Contracts.CommerceRuntime.Payments.Payment GetPayment(string returnId, string paymentId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Payments.Payment> response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.GetPaymentClient( returnId,  paymentId,  responseFields);
			client.WithContext(_apiContext);
			response = client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieves the details of a payment submitted as part of a refund associated with a customer return.
		/// </summary>
		/// <param name="paymentId">Unique identifier of the payment for which to perform the action.</param>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="returnId">Unique identifier of the return whose items you want to get.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Payments.Payment"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   var payment = await return.GetPaymentAsync( returnId,  paymentId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Payments.Payment> GetPaymentAsync(string returnId, string paymentId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Payments.Payment> response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.GetPaymentClient( returnId,  paymentId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();
			return await response.ResultAsync();

		}

		/// <summary>
		/// Retrieves a list of all payments submitted as part of a refund associated with a customer return.
		/// </summary>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="returnId">Unique identifier of the return whose items you want to get.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Payments.PaymentCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   var paymentCollection = return.GetPayments( returnId,  responseFields);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual Mozu.Api.Contracts.CommerceRuntime.Payments.PaymentCollection GetPayments(string returnId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Payments.PaymentCollection> response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.GetPaymentsClient( returnId,  responseFields);
			client.WithContext(_apiContext);
			response = client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieves a list of all payments submitted as part of a refund associated with a customer return.
		/// </summary>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="returnId">Unique identifier of the return whose items you want to get.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Payments.PaymentCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   var paymentCollection = await return.GetPaymentsAsync( returnId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Payments.PaymentCollection> GetPaymentsAsync(string returnId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Payments.PaymentCollection> response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.GetPaymentsClient( returnId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();
			return await response.ResultAsync();

		}

		/// <summary>
		/// Retrieves a list of properties for the specified return.
		/// </summary>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="returnId">Unique identifier of the return whose items you want to get.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Returns.Return"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   var return = return.GetReturn( returnId,  responseFields);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual Mozu.Api.Contracts.CommerceRuntime.Returns.Return GetReturn(string returnId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Returns.Return> response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.GetReturnClient( returnId,  responseFields);
			client.WithContext(_apiContext);
			response = client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieves a list of properties for the specified return.
		/// </summary>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="returnId">Unique identifier of the return whose items you want to get.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Returns.Return"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   var return = await return.GetReturnAsync( returnId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Returns.Return> GetReturnAsync(string returnId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Returns.Return> response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.GetReturnClient( returnId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();
			return await response.ResultAsync();

		}

		/// <summary>
		/// commerce-returns Get GetReasons description DOCUMENT_HERE 
		/// </summary>
		/// <param name="responseFields">A list or array of fields returned for a call. These fields may be customized and may be used for various types of data calls in Mozu. For example, responseFields are returned for retrieving or updating attributes, carts, and messages in Mozu.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Returns.ReasonCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   var reasonCollection = return.GetReasons( responseFields);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual Mozu.Api.Contracts.CommerceRuntime.Returns.ReasonCollection GetReasons(string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Returns.ReasonCollection> response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.GetReasonsClient( responseFields);
			client.WithContext(_apiContext);
			response = client.Execute();
			return response.Result();

		}

		/// <summary>
		/// commerce-returns Get GetReasons description DOCUMENT_HERE 
		/// </summary>
		/// <param name="responseFields">A list or array of fields returned for a call. These fields may be customized and may be used for various types of data calls in Mozu. For example, responseFields are returned for retrieving or updating attributes, carts, and messages in Mozu.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Returns.ReasonCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   var reasonCollection = await return.GetReasonsAsync( responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Returns.ReasonCollection> GetReasonsAsync(string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Returns.ReasonCollection> response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.GetReasonsClient( responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();
			return await response.ResultAsync();

		}

		/// <summary>
		/// Creates a return for previously fulfilled items. Each return must either be associated with an original order or a product definition to represent each returned item.
		/// </summary>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="ret">Properties of a return of one or more previously fulfilled items.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Returns.Return"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   var return = return.CreateReturn( ret,  responseFields);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual Mozu.Api.Contracts.CommerceRuntime.Returns.Return CreateReturn(Mozu.Api.Contracts.CommerceRuntime.Returns.Return ret, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Returns.Return> response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.CreateReturnClient( ret,  responseFields);
			client.WithContext(_apiContext);
			response = client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Creates a return for previously fulfilled items. Each return must either be associated with an original order or a product definition to represent each returned item.
		/// </summary>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="ret">Properties of a return of one or more previously fulfilled items.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Returns.Return"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   var return = await return.CreateReturnAsync( ret,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Returns.Return> CreateReturnAsync(Mozu.Api.Contracts.CommerceRuntime.Returns.Return ret, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Returns.Return> response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.CreateReturnClient( ret,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();
			return await response.ResultAsync();

		}

		/// <summary>
		/// Adds a return item to the return.
		/// </summary>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="returnId">Unique identifier of the return whose items you want to get.</param>
		/// <param name="returnItem">Properties of a previously fulfilled item associated with a return.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Returns.Return"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   var return = return.CreateReturnItem( returnItem,  returnId,  responseFields);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual Mozu.Api.Contracts.CommerceRuntime.Returns.Return CreateReturnItem(Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnItem returnItem, string returnId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Returns.Return> response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.CreateReturnItemClient( returnItem,  returnId,  responseFields);
			client.WithContext(_apiContext);
			response = client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Adds a return item to the return.
		/// </summary>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="returnId">Unique identifier of the return whose items you want to get.</param>
		/// <param name="returnItem">Properties of a previously fulfilled item associated with a return.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Returns.Return"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   var return = await return.CreateReturnItemAsync( returnItem,  returnId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Returns.Return> CreateReturnItemAsync(Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnItem returnItem, string returnId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Returns.Return> response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.CreateReturnItemClient( returnItem,  returnId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();
			return await response.ResultAsync();

		}

		/// <summary>
		/// Updates a refund payment associated with a customer return by performing the specified action.
		/// </summary>
		/// <param name="paymentId">Unique identifier of the payment for which to perform the action.</param>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="returnId">Unique identifier of the return whose items you want to get.</param>
		/// <param name="action">Properties of the payment action performed for an order.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Returns.Return"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   var return = return.PerformPaymentActionForReturn( action,  returnId,  paymentId,  responseFields);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual Mozu.Api.Contracts.CommerceRuntime.Returns.Return PerformPaymentActionForReturn(Mozu.Api.Contracts.CommerceRuntime.Payments.PaymentAction action, string returnId, string paymentId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Returns.Return> response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.PerformPaymentActionForReturnClient( action,  returnId,  paymentId,  responseFields);
			client.WithContext(_apiContext);
			response = client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Updates a refund payment associated with a customer return by performing the specified action.
		/// </summary>
		/// <param name="paymentId">Unique identifier of the payment for which to perform the action.</param>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="returnId">Unique identifier of the return whose items you want to get.</param>
		/// <param name="action">Properties of the payment action performed for an order.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Returns.Return"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   var return = await return.PerformPaymentActionForReturnAsync( action,  returnId,  paymentId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Returns.Return> PerformPaymentActionForReturnAsync(Mozu.Api.Contracts.CommerceRuntime.Payments.PaymentAction action, string returnId, string paymentId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Returns.Return> response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.PerformPaymentActionForReturnClient( action,  returnId,  paymentId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();
			return await response.ResultAsync();

		}

		/// <summary>
		/// Creates a new payment for a return that results in a refund to the customer.
		/// </summary>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="returnId">Unique identifier of the return whose items you want to get.</param>
		/// <param name="action">Properties of the payment action performed for an order.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Returns.Return"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   var return = return.CreatePaymentActionForReturn( action,  returnId,  responseFields);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual Mozu.Api.Contracts.CommerceRuntime.Returns.Return CreatePaymentActionForReturn(Mozu.Api.Contracts.CommerceRuntime.Payments.PaymentAction action, string returnId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Returns.Return> response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.CreatePaymentActionForReturnClient( action,  returnId,  responseFields);
			client.WithContext(_apiContext);
			response = client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Creates a new payment for a return that results in a refund to the customer.
		/// </summary>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="returnId">Unique identifier of the return whose items you want to get.</param>
		/// <param name="action">Properties of the payment action performed for an order.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Returns.Return"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   var return = await return.CreatePaymentActionForReturnAsync( action,  returnId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Returns.Return> CreatePaymentActionForReturnAsync(Mozu.Api.Contracts.CommerceRuntime.Payments.PaymentAction action, string returnId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Returns.Return> response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.CreatePaymentActionForReturnClient( action,  returnId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();
			return await response.ResultAsync();

		}

		/// <summary>
		/// Updates the return by performing the action specified in the request.
		/// </summary>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="action">Properties of an action a user can perform for a return.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   var returnCollection = return.PerformReturnActions( action,  responseFields);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnCollection PerformReturnActions(Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnAction action, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnCollection> response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.PerformReturnActionsClient( action,  responseFields);
			client.WithContext(_apiContext);
			response = client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Updates the return by performing the action specified in the request.
		/// </summary>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="action">Properties of an action a user can perform for a return.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   var returnCollection = await return.PerformReturnActionsAsync( action,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnCollection> PerformReturnActionsAsync(Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnAction action, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnCollection> response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.PerformReturnActionsClient( action,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();
			return await response.ResultAsync();

		}

		/// <summary>
		/// Updates one or more properties of a return for items previously shipped in a completed order.
		/// </summary>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="returnId">Unique identifier of the return whose items you want to get.</param>
		/// <param name="ret">Properties of a return of one or more previously fulfilled items.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Returns.Return"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   var return = return.UpdateReturn( ret,  returnId,  responseFields);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual Mozu.Api.Contracts.CommerceRuntime.Returns.Return UpdateReturn(Mozu.Api.Contracts.CommerceRuntime.Returns.Return ret, string returnId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Returns.Return> response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.UpdateReturnClient( ret,  returnId,  responseFields);
			client.WithContext(_apiContext);
			response = client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Updates one or more properties of a return for items previously shipped in a completed order.
		/// </summary>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="returnId">Unique identifier of the return whose items you want to get.</param>
		/// <param name="ret">Properties of a return of one or more previously fulfilled items.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Returns.Return"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   var return = await return.UpdateReturnAsync( ret,  returnId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Returns.Return> UpdateReturnAsync(Mozu.Api.Contracts.CommerceRuntime.Returns.Return ret, string returnId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Returns.Return> response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.UpdateReturnClient( ret,  returnId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();
			return await response.ResultAsync();

		}

		/// <summary>
		/// commerce-returns Put ResendReturnEmail description DOCUMENT_HERE 
		/// </summary>
		/// <param name="action">Properties of an action a user can perform for a return.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   return.ResendReturnEmail( action);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual void ResendReturnEmail(Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnAction action)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.ResendReturnEmailClient( action);
			client.WithContext(_apiContext);
			response = client.Execute();

		}

		/// <summary>
		/// commerce-returns Put ResendReturnEmail description DOCUMENT_HERE 
		/// </summary>
		/// <param name="action">Properties of an action a user can perform for a return.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   await return.ResendReturnEmailAsync( action);
		/// </code>
		/// </example>
		public virtual async Task ResendReturnEmailAsync(Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnAction action)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.ResendReturnEmailClient( action);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();

		}

		/// <summary>
		/// Removes a particular order item from the order of the current shopper.
		/// </summary>
		/// <param name="returnId">Unique identifier of the return whose items you want to get.</param>
		/// <param name="returnItemId">Unique identifier of the return item whose details you want to get.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Returns.Return"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   var return = return.DeleteOrderItem( returnId,  returnItemId);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual Mozu.Api.Contracts.CommerceRuntime.Returns.Return DeleteOrderItem(string returnId, string returnItemId)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Returns.Return> response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.DeleteOrderItemClient( returnId,  returnItemId);
			client.WithContext(_apiContext);
			response = client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Removes a particular order item from the order of the current shopper.
		/// </summary>
		/// <param name="returnId">Unique identifier of the return whose items you want to get.</param>
		/// <param name="returnItemId">Unique identifier of the return item whose details you want to get.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Returns.Return"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   var return = await return.DeleteOrderItemAsync( returnId,  returnItemId);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Returns.Return> DeleteOrderItemAsync(string returnId, string returnItemId)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Returns.Return> response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.DeleteOrderItemClient( returnId,  returnItemId);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();
			return await response.ResultAsync();

		}

		/// <summary>
		/// Deletes the return specified in the request.
		/// </summary>
		/// <param name="returnId">Unique identifier of the return whose items you want to get.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   return.DeleteReturn( returnId);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual void DeleteReturn(string returnId)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.DeleteReturnClient( returnId);
			client.WithContext(_apiContext);
			response = client.Execute();

		}

		/// <summary>
		/// Deletes the return specified in the request.
		/// </summary>
		/// <param name="returnId">Unique identifier of the return whose items you want to get.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var return = new Return();
		///   await return.DeleteReturnAsync( returnId);
		/// </code>
		/// </example>
		public virtual async Task DeleteReturnAsync(string returnId)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.ReturnClient.DeleteReturnClient( returnId);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();

		}


	}

}


