
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

namespace Mozu.Api.Urls.Platform.Entitylists
{
	public partial class ListViewUrl 
	{

		/// <summary>
        /// Get Resource Url for GetViewEntity
        /// </summary>
        /// <param name="entityId">Unique identifier for an entity, which defines the schema, rules, and formats for JSON entities within the MZDB (Mozu Mongo DB).</param>
        /// <param name="entityListFullName">The full name of the EntityList including namespace in name@nameSpace format</param>
        /// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
        /// <param name="viewName">The name for a view. Views are used to render data in Mozu, such as document and entity lists. Each view includes a schema, format, name, ID, and associated data types to render.</param>
        /// <returns>
        /// String - Resource Url
        /// </returns>
        public static MozuUrl GetViewEntityUrl(string entityListFullName, string viewName, string entityId, string responseFields =  null)
		{
			var url = "/api/platform/entitylists/{entityListFullName}/views/{viewName}/entities/{entityId}?responseFields={responseFields}";
			var mozuUrl = new MozuUrl(url, MozuUrl.UrlLocation.TENANT_POD, false) ;
			mozuUrl.FormatUrl( "entityId", entityId);
			mozuUrl.FormatUrl( "entityListFullName", entityListFullName);
			mozuUrl.FormatUrl( "responseFields", responseFields);
			mozuUrl.FormatUrl( "viewName", viewName);
			return mozuUrl;
		}

		/// <summary>
        /// Get Resource Url for GetViewEntities
        /// </summary>
        /// <param name="entityListFullName">The full name of the EntityList including namespace in name@nameSpace format</param>
        /// <param name="filter">A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"</param>
        /// <param name="pageSize">The number of results to display on each page when creating paged results from a query. The amount is divided and displayed on the `pageCount `amount of pages. The default is 20 and maximum value is 200 per page.</param>
        /// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
        /// <param name="startIndex">When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a `pageSize `of 25, to get the 51st through the 75th items, use `startIndex=3`.</param>
        /// <param name="viewName">The name for a view. Views are used to render data in Mozu, such as document and entity lists. Each view includes a schema, format, name, ID, and associated data types to render.</param>
        /// <returns>
        /// String - Resource Url
        /// </returns>
        public static MozuUrl GetViewEntitiesUrl(string entityListFullName, string viewName, int? pageSize =  null, int? startIndex =  null, string filter =  null, string responseFields =  null)
		{
			var url = "/api/platform/entitylists/{entityListFullName}/views/{viewName}/entities?pageSize={pageSize}&startIndex={startIndex}&filter={filter}&responseFields={responseFields}";
			var mozuUrl = new MozuUrl(url, MozuUrl.UrlLocation.TENANT_POD, false) ;
			mozuUrl.FormatUrl( "entityListFullName", entityListFullName);
			mozuUrl.FormatUrl( "filter", filter);
			mozuUrl.FormatUrl( "pageSize", pageSize);
			mozuUrl.FormatUrl( "responseFields", responseFields);
			mozuUrl.FormatUrl( "startIndex", startIndex);
			mozuUrl.FormatUrl( "viewName", viewName);
			return mozuUrl;
		}

		/// <summary>
        /// Get Resource Url for GetViewEntityContainer
        /// </summary>
        /// <param name="entityId">Unique identifier for an entity, which defines the schema, rules, and formats for JSON entities within the MZDB (Mozu Mongo DB).</param>
        /// <param name="entityListFullName">The full name of the EntityList including namespace in name@nameSpace format</param>
        /// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
        /// <param name="viewName">The name for a view. Views are used to render data in Mozu, such as document and entity lists. Each view includes a schema, format, name, ID, and associated data types to render.</param>
        /// <returns>
        /// String - Resource Url
        /// </returns>
        public static MozuUrl GetViewEntityContainerUrl(string entityListFullName, string viewName, string entityId, string responseFields =  null)
		{
			var url = "/api/platform/entitylists/{entityListFullName}/views/{viewName}/entityContainers/{entityId}?responseFields={responseFields}";
			var mozuUrl = new MozuUrl(url, MozuUrl.UrlLocation.TENANT_POD, false) ;
			mozuUrl.FormatUrl( "entityId", entityId);
			mozuUrl.FormatUrl( "entityListFullName", entityListFullName);
			mozuUrl.FormatUrl( "responseFields", responseFields);
			mozuUrl.FormatUrl( "viewName", viewName);
			return mozuUrl;
		}

		/// <summary>
        /// Get Resource Url for GetViewEntityContainers
        /// </summary>
        /// <param name="entityListFullName">The full name of the EntityList including namespace in name@nameSpace format</param>
        /// <param name="filter">A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"</param>
        /// <param name="pageSize">The number of results to display on each page when creating paged results from a query. The amount is divided and displayed on the `pageCount `amount of pages. The default is 20 and maximum value is 200 per page.</param>
        /// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
        /// <param name="startIndex">When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a `pageSize `of 25, to get the 51st through the 75th items, use `startIndex=3`.</param>
        /// <param name="viewName">The name for a view. Views are used to render data in Mozu, such as document and entity lists. Each view includes a schema, format, name, ID, and associated data types to render.</param>
        /// <returns>
        /// String - Resource Url
        /// </returns>
        public static MozuUrl GetViewEntityContainersUrl(string entityListFullName, string viewName, int? pageSize =  null, int? startIndex =  null, string filter =  null, string responseFields =  null)
		{
			var url = "/api/platform/entitylists/{entityListFullName}/views/{viewName}/entityContainers?pageSize={pageSize}&startIndex={startIndex}&filter={filter}&responseFields={responseFields}";
			var mozuUrl = new MozuUrl(url, MozuUrl.UrlLocation.TENANT_POD, false) ;
			mozuUrl.FormatUrl( "entityListFullName", entityListFullName);
			mozuUrl.FormatUrl( "filter", filter);
			mozuUrl.FormatUrl( "pageSize", pageSize);
			mozuUrl.FormatUrl( "responseFields", responseFields);
			mozuUrl.FormatUrl( "startIndex", startIndex);
			mozuUrl.FormatUrl( "viewName", viewName);
			return mozuUrl;
		}

		/// <summary>
        /// Get Resource Url for GetEntityListView
        /// </summary>
        /// <param name="entityListFullName">The full name of the EntityList including namespace in name@nameSpace format</param>
        /// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
        /// <param name="viewName">The name for a view. Views are used to render data in Mozu, such as document and entity lists. Each view includes a schema, format, name, ID, and associated data types to render.</param>
        /// <returns>
        /// String - Resource Url
        /// </returns>
        public static MozuUrl GetEntityListViewUrl(string entityListFullName, string viewName, string responseFields =  null)
		{
			var url = "/api/platform/entitylists/{entityListFullName}/views/{viewName}?responseFields={responseFields}";
			var mozuUrl = new MozuUrl(url, MozuUrl.UrlLocation.TENANT_POD, false) ;
			mozuUrl.FormatUrl( "entityListFullName", entityListFullName);
			mozuUrl.FormatUrl( "responseFields", responseFields);
			mozuUrl.FormatUrl( "viewName", viewName);
			return mozuUrl;
		}

		/// <summary>
        /// Get Resource Url for GetEntityListViews
        /// </summary>
        /// <param name="entityListFullName">The full name of the EntityList including namespace in name@nameSpace format</param>
        /// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
        /// <returns>
        /// String - Resource Url
        /// </returns>
        public static MozuUrl GetEntityListViewsUrl(string entityListFullName, string responseFields =  null)
		{
			var url = "/api/platform/entitylists/{entityListFullName}/views?responseFields={responseFields}";
			var mozuUrl = new MozuUrl(url, MozuUrl.UrlLocation.TENANT_POD, false) ;
			mozuUrl.FormatUrl( "entityListFullName", entityListFullName);
			mozuUrl.FormatUrl( "responseFields", responseFields);
			return mozuUrl;
		}

				/// <summary>
        /// Get Resource Url for CreateEntityListView
        /// </summary>
        /// <param name="entityListFullName">The full name of the EntityList including namespace in name@nameSpace format</param>
        /// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
        /// <returns>
        /// String - Resource Url
        /// </returns>
        public static MozuUrl CreateEntityListViewUrl(string entityListFullName, string responseFields =  null)
		{
			var url = "/api/platform/entitylists/{entityListFullName}/views/?responseFields={responseFields}";
			var mozuUrl = new MozuUrl(url, MozuUrl.UrlLocation.TENANT_POD, false) ;
			mozuUrl.FormatUrl( "entityListFullName", entityListFullName);
			mozuUrl.FormatUrl( "responseFields", responseFields);
			return mozuUrl;
		}

				/// <summary>
        /// Get Resource Url for UpdateEntityListView
        /// </summary>
        /// <param name="entityListFullName">The full name of the EntityList including namespace in name@nameSpace format</param>
        /// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
        /// <param name="viewName">The name for a view. Views are used to render data in Mozu, such as document and entity lists. Each view includes a schema, format, name, ID, and associated data types to render.</param>
        /// <returns>
        /// String - Resource Url
        /// </returns>
        public static MozuUrl UpdateEntityListViewUrl(string entityListFullName, string viewName, string responseFields =  null)
		{
			var url = "/api/platform/entitylists/{entityListFullName}/views/{viewName}?responseFields={responseFields}";
			var mozuUrl = new MozuUrl(url, MozuUrl.UrlLocation.TENANT_POD, false) ;
			mozuUrl.FormatUrl( "entityListFullName", entityListFullName);
			mozuUrl.FormatUrl( "responseFields", responseFields);
			mozuUrl.FormatUrl( "viewName", viewName);
			return mozuUrl;
		}

				/// <summary>
        /// Get Resource Url for DeleteEntityListView
        /// </summary>
        /// <param name="entityListFullName">The full name of the EntityList including namespace in name@nameSpace format</param>
        /// <param name="viewName">The name for a view. Views are used to render data in Mozu, such as document and entity lists. Each view includes a schema, format, name, ID, and associated data types to render.</param>
        /// <returns>
        /// String - Resource Url
        /// </returns>
        public static MozuUrl DeleteEntityListViewUrl(string entityListFullName, string viewName)
		{
			var url = "/api/platform/entitylists/{entityListFullName}/views/{viewName}";
			var mozuUrl = new MozuUrl(url, MozuUrl.UrlLocation.TENANT_POD, false) ;
			mozuUrl.FormatUrl( "entityListFullName", entityListFullName);
			mozuUrl.FormatUrl( "viewName", viewName);
			return mozuUrl;
		}

		
	}
}

